#!/usr/bin/env raku
grammar PassportBatch {...}
role Validation {}
class Valid does Validation     { method Bool(Valid:U: --> True) {} }
role Invalid does Validation { method Bool() { False }}
role Invalid::Unparseable    does Invalid {}
role Invalid::MissingField   does Invalid {}
role Invalid::BirthYear      does Invalid {}
role Invalid::IssueYear      does Invalid {}
role Invalid::ExpirationYear does Invalid {}
role Invalid::Height         does Invalid {}
role Invalid::HairColor      does Invalid {}
role Invalid::EyeColor       does Invalid {}
role Invalid::PassportID     does Invalid {}

#| Check a passport file for passports with missing fields (p1) or invalid values (p2)
sub MAIN(Bool :$p2=?0, Bool :$p1=!$p2) {
    say parse-batch($*IN.slurp).map(*.&validate)
                               .grep($p1 ?? none(Invalid::MissingField) !! Valid)
                               .elems;
}

multi validate(Nil       --> Invalid::MissingField) {}
multi validate(%passport --> Validation) { given %passport {
    when any(.<birth-year  issue-year  expiration-year
               height hair-color eye-color passport-id>:!exists)           { Invalid::MissingField }
    when .<birth-year> !~~ /^ \d ** 4 $/ || !(1920 ≤ .<birth-year> ≤ 2002) { Invalid::BirthYear }
    when .<issue-year> !~~ /^ \d ** 4 $/ || !(2010 ≤ .<issue-year> ≤ 2020) { Invalid::IssueYear }
    when .<expiration-year> !~~ /^ \d ** 4 $/
      || !(2020 ≤ .<expiration-year> ≤ 2030)                               { Invalid::ExpirationYear }
    when .<height> !~~ /^ (\d+) ('cm' | 'in' ) $/
      || none($1 eq 'cm' && 150 ≤ $0 ≤ 193, $1 eq 'in' && 59  ≤ $0 ≤ 76)   { Invalid::Height }
    when .<hair-color> !~~ /^ '#' <[0..9 a..f]> ** 6 $/                    { Invalid::HairColor }
    when .<eye-color> !~~ /^[amb | blu | brn | gry | grn | hzl | oth]$/    { Invalid::EyeColor }
    when .<passport-id> !~~ /^ \d ** 9 $/                                  { Invalid::PassportID }
    default                                                                { Valid }
}}

sub parse-batch(Str $input --> List) { PassportBatch.parse($input).made }
grammar PassportBatch {
    token TOP       { <passport>+ %  \n    { make $<passport>».made }}
    token passport  { [<kv-pair>]+         { make %($<kv-pair>».made) }}
    token kv-pair   { <key> ':' <value> \s { make $<key>.made => ~$<value> }}
    proto token key {*}
    token key:sym<byr> { <sym> { make 'birth-year'}}
    token key:sym<iyr> { <sym> { make 'issue-year'}}
    token key:sym<eyr> { <sym> { make 'expiration-year'}}
    token key:sym<hgt> { <sym> { make 'height'}}
    token key:sym<hcl> { <sym> { make 'hair-color'}}
    token key:sym<ecl> { <sym> { make 'eye-color'}}
    token key:sym<pid> { <sym> { make 'passport-id'}}
    token key:sym<cid> { <sym> { make 'country-id'}}
    token value { <.graph>+ }
}

# Tests (run with `raku --doc -c $FILE`)
DOC CHECK { use Test;
    my &e-say = { diag("passport input:\n{.indent(4)}");
                  diag("parsed as:\n{.&parse-batch}")};
    subtest 'part 1', {
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Valid) || .&e-say }
            ecl:gry pid:860033327 eyr:2020 hcl:#fffffdyy
            byr:1937 iyr:2017 cid:147 hgt:183cm
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Invalid) || .&e-say }
            iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
            hcl:#cfa07d byr:1929
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Valid) || .&e-say }
            hcl:#ae17e1 iyr:2013
            eyr:2024
            ecl:brn pid:760753108 byr:1931
            hgt:179cm
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Invalid) || .&e-say }
            hcl:#cfa07d eyr:2025 pid:166559648
            iyr:2011 ecl:brn hgt:59in
            EOF
   }
   subtest 'part 2',  {
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Invalid) || .&e-say }
            eyr:1972 cid:100
            hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Invalid) || .&e-say }
            iyr:2019
            hcl:#602927 eyr:1967 hgt:170cm
            ecl:grn pid:012533040 byr:1946
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Invalid) || .&e-say }
            hcl:dab227 iyr:2012
            ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Invalid) || .&e-say }
            hgt:59cm ecl:zzz
            eyr:2038 hcl:74454a iyr:2023
            pid:3556412378 byr:2007
            EOF
        
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Valid) || .&e-say }
            pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980
            hcl:#623a2f
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Valid) || .&e-say }
            eyr:2029 ecl:blu cid:129 byr:1989
            iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Valid) || .&e-say }
            hcl:#888785
            hgt:164cm byr:2001 iyr:2015 cid:88
            pid:545766238 ecl:hzl
            eyr:2022
            EOF
        given q:to/EOF/ { .&parse-batch.head.&validate.&does-ok(Valid) || .&e-say }
            iyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719
            EOF
    }
}
